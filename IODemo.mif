-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 8066;  -- 	CALL   SetupI2C    ; Configure ADXL345
           001 : 08A9;  -- 	Load Pattern
           002 : 48AC;  -- 	AND Zero
           003 : 5042;  -- 	OR    Opponent 
           004 : 9804;  -- 	OUT Hex0
           005 : 10A9;  -- 	STORE  Pattern
           006 : 0843;  -- 	LOAD Player
           007 : 48AC;  -- 	AND Zero
           008 : 5045;  -- 	OR	Down
           009 : 1043;  -- 	STORE Player
           00A : 9805;  -- 	OUT Hex1
           00B : 084A;  -- 	LOAD Score
           00C : 48AC;  -- 	AND Zero
           00D : 50AE;  -- 	OR Bit0
           00E : 104A;  -- 	STORE Score
           00F : 0842;  -- 	LOAD Opponent
           010 : 9804;  -- 	OUT Hex0
           011 : 10A9;  -- 	STORE Pattern
           012 : 8056;  -- 	CALL   Delay
           013 : 08A9;  -- 	LOAD   Pattern        ; bit mask
           014 : 6004;  -- 	SHIFT 4
           015 : 10A9;  -- 	STORE Pattern
           016 : 401C;  -- 	JZERO BeforeFirst
           017 : 9804;  -- 	OUT    Hex0
           018 : 807C;  -- 	CALL   ReadX
           019 : 3031;  -- 	JNEG	Negative
           01A : 3835;  -- 	JPOS	Positive
           01B : 2812;  -- 	JUMP   ZerothHex
           01C : 0844;  -- 	LOAD Up
           01D : 10A9;  -- 	STORE Pattern
           01E : 8056;  -- 	CALL Delay
           01F : 08A9;  -- 	LOAD  Pattern
           020 : 2043;  -- 	SUB Player
           021 : 404D;  -- 	JZERO CollisonDetected
           022 : 2823;  -- 	JUMP Escape
           023 : 084A;  -- 	LOAD Score
           024 : 9801;  -- 	OUT LEDs
           025 : 6001;  -- 	SHIFT 1
           026 : 104A;  -- 	STORE SCORE
           027 : 082F;  -- 	LOAD Three
           028 : 9805;  -- 	OUT Hex1
           029 : 08AC;  -- 	LOAD Zero
           02A : 9804;  -- 	OUT Hex0
           02B : 8056;  -- 	CALL Delay
           02C : 0830;  -- 	LOAD Twice
           02D : 9805;  -- 	OUT Hex1
           02E : 280F;  -- 	JUMP BeforeZero	
           02F : 0003;  -- Three: DW &H03
           030 : 0012;  -- Twice: DW &H12
           031 : 0849;  -- 	LOAD TemporaryAccData
           032 : 2046;  -- 	SUB CheckUp
           033 : 383A;  -- 	JPOS PlayerUp
           034 : 2812;  -- 	JUMP ZerothHex
           035 : 0849;  -- 	LOAD TemporaryAccData
           036 : 0845;  -- 	LOAD Down
           037 : 1043;  -- 	STORE Player
           038 : 9805;  -- 	OUT Hex1
           039 : 2812;  -- 	JUMP ZerothHex
           03A : 0844;  -- 	LOAD Up
           03B : 1043;  -- 	STORE Player
           03C : 9805;  -- 	OUT Hex1
           03D : 2812;  -- 	JUMP ZerothHex
           03E : 0845;  -- 	LOAD Down
           03F : 1043;  -- 	STORE Player
           040 : 9805;  -- 	OUT Hex1
           041 : 2812;  -- 	JUMP ZerothHex
           042 : 0001;  -- Opponent:  DW &H0001
           043 : 0002;  -- Player:	   DW &H02
           044 : 0001;  -- Up:		   DW &H01
           045 : 0002;  -- Down:	   DW &H02
           046 : FFB0;  -- CheckUp:   DW &HFFB0
           047 : F000;  -- CheckNeg:  DW &HF000
           048 : 0050;  -- CheckDown: DW &H0050
           049 : 0000;  -- TemporaryAccData: DW 0
           04A : 0001;  -- Score:	DW &B0000000001
           04B : 0010;  -- CheckLeftUp: DW &H10
           04C : 0001;  -- CheckLeftDown: DW &H01
           04D : 284D;  -- 	JUMP CollisonDetected
           04E : 8056;  -- 	CALL   Delay
           04F : 08A9;  -- 	LOAD   Pattern
           050 : 48AE;  -- 	AND    Bit0         ; bit mask
           051 : 08A9;  -- 	LOAD   Pattern
           052 : 6011;  -- 	SHIFT  -1
           053 : 10A9;  -- 	STORE  Pattern
           054 : 9801;  -- 	OUT    LEDs
           055 : 284E;  -- 	JUMP   Right
           056 : 9802;  -- 	OUT    Timer
           057 : 9002;  -- 	IN     Timer
           058 : 6FFB;  -- 	ADDI   -5
           059 : 3057;  -- 	JNEG   WaitingLoop
           05A : 8800;  -- 	RETURN
           05B : 8090;  -- 	CALL   BlockI2C    ; wait for idle
           05C : 089E;  -- 	LOAD   I2CR1Cmd    ; load command
           05D : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           05E : 08A2;  -- 	LOAD   SRCAddr    ; 
           05F : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           060 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           061 : 8090;  -- 	CALL   BlockI2C    ; wait for it to finish
           062 : 9091;  -- 	IN     I2C_data    ; put the data in AC
           063 : 6017;  -- 	SHIFT -7
           064 : 405B;  -- 	JZERO   WaitForData   ; bytes returned in wrong order; swap them
           065 : 8800;  -- 	RETURN
           066 : 08A3;  -- 	LOAD   AccCfg      ; load the number of commands
           067 : 107B;  -- 	STORE  CmdCnt
           068 : B8A3;  -- 	LOADI  AccCfg      ; Load list ADDRESS
           069 : 6801;  -- 	ADDI   1           ; Increment to first command
           06A : 107A;  -- 	STORE  CmdPtr
           06B : 8090;  -- 	CALL   BlockI2C    ; wait for idle
           06C : 089D;  -- 	LOAD   I2CWCmd     ; load write command
           06D : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           06E : 707A;  -- 	ILOAD  CmdPtr      ; load current command
           06F : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           070 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           071 : 8090;  -- 	CALL   BlockI2C    ; wait for it to finish
           072 : 087A;  -- 	LOAD   CmdPtr
           073 : 6801;  -- 	ADDI   1           ; Increment to next command
           074 : 107A;  -- 	STORE  CmdPtr
           075 : 087B;  -- 	LOAD   CmdCnt
           076 : 6FFF;  -- 	ADDI   -1
           077 : 107B;  -- 	STORE  CmdCnt
           078 : 386B;  -- 	JPOS   I2CCmdLoop
           079 : 8800;  -- 	RETURN
           07A : 0000;  -- CmdPtr: DW 0
           07B : 0000;  -- CmdCnt: DW 0
           07C : 8090;  -- 	CALL   BlockI2C    ; wait for idle
           07D : 089F;  -- 	LOAD   I2CR2Cmd    ; load command
           07E : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           07F : 08A1;  -- 	LOAD   AccXAddr    ; 
           080 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           081 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           082 : 8090;  -- 	CALL   BlockI2C    ; wait for it to finish
           083 : 9091;  -- 	IN     I2C_data    ; put the data in AC
           084 : 8086;  -- 	CALL   SwapBytes   ; bytes returned in wrong order; swap them
           085 : 8800;  -- 	RETURN
           086 : 108E;  -- 	STORE  SBT1
           087 : 6008;  -- 	SHIFT  8
           088 : 108F;  -- 	STORE  SBT2
           089 : 088E;  -- 	LOAD   SBT1
           08A : 6018;  -- 	SHIFT  -8
           08B : 48B8;  -- 	AND    LoByte
           08C : 508F;  -- 	OR     SBT2
           08D : 8800;  -- 	RETURN
           08E : 0000;  -- SBT1: DW 0
           08F : 0000;  -- SBT2: DW 0
           090 : 08AC;  -- 	LOAD   Zero
           091 : 10AA;  -- 	STORE  Temp        ; Used to check for timeout
           092 : 08AA;  -- 	LOAD   Temp
           093 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           094 : 10AA;  -- 	STORE  Temp
           095 : 4099;  -- 	JZERO  I2CError    ; Timeout occurred; error
           096 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           097 : 3892;  -- 	JPOS   BI2CL       ; If not 0, try again
           098 : 8800;  -- 	RETURN             ; Else return
           099 : 08AC;  -- 	LOAD   Zero
           09A : 692C;  -- 	ADDI   &H12C       ; "I2C"
           09B : 9804;  -- 	OUT    Hex0        ; display error message
           09C : 2899;  -- 	JUMP   I2CError
           09D : 203A;  -- I2CWCmd:  DW &H203A    ; write two i2c bytes, addr 0x3A
           09E : 113A;  -- I2CR1Cmd: DW &H113A    ; write one byte, read one byte, addr 0x3A
           09F : 123A;  -- I2CR2Cmd: DW &H123A    ; write one byte, read two bytes, addr 0x3A
           0A0 : 1130;  -- I2CR3Cmd: DW &H1130
           0A1 : 0034;  -- AccXAddr: DW &H34      ; X acceleration register address.
           0A2 : 0030;  -- SRCAddr:  DW &H30
           0A3 : 0005;  -- 	DW 5           ; Number of commands to send
           0A4 : 0000;  -- 	DW &H0000      ; Meaningless write to sync communication
           0A5 : 3103;  -- 	DW &H3103      ; Right-justified 10-bit data, +/-2 G
           0A6 : 3800;  -- 	DW &H3800      ; No FIFO
           0A7 : 2C0A;  -- 	DW &H2C0A      ; 6.25 samples per second
           0A8 : 2D08;  -- 	DW &H2D08      ; No sleep
           0A9 : 0000;  -- Pattern:   DW 0
           0AA : 0000;  -- Temp:      DW 0
           0AB : 0000;  -- ReadCount: DW 0
           0AC : 0000;  -- Zero:      DW 0
           0AD : FFFF;  -- NegOne:    DW -1
           0AE : 0001;  -- Bit0:      DW &B0000000001
           0AF : 0002;  -- Bit1:      DW &B0000000010
           0B0 : 0004;  -- Bit2:      DW &B0000000100
           0B1 : 0008;  -- Bit3:      DW &B0000001000
           0B2 : 0010;  -- Bit4:      DW &B0000010000
           0B3 : 0020;  -- Bit5:      DW &B0000100000
           0B4 : 0040;  -- Bit6:      DW &B0001000000
           0B5 : 0080;  -- Bit7:      DW &B0010000000
           0B6 : 0100;  -- Bit8:      DW &B0100000000
           0B7 : 0200;  -- Bit9:      DW &B1000000000
           0B8 : 00FF;  -- LoByte:    DW &H00FF
           0B9 : FF00;  -- HiByte:    DW &HFF00
  END;
