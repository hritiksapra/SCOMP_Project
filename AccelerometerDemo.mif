-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 8049;  -- 	CALL   SetupI2C    ; Configure ADXL345
           001 : 805F;  -- 	CALL   ReadX       ; Get the X acceleration data
           002 : 9804;  -- 	OUT    Hex0        ; Display raw data
           003 : 8005;  -- 	CALL   BubbleLevel
           004 : 2801;  -- 	JUMP   ReadLoop    ; Repeat forever
           005 : 103D;  -- 	STORE  BblVal
           006 : 8080;  -- 	CALL   Abs
           007 : 103E;  -- 	STORE  BblPosVal
           008 : BFF8;  -- 	LOADI  &B11111111000 ; Make a mask of bits for movement
           009 : 483E;  -- 	AND    BblPosVal   ; Get those bits of the value
           00A : 6013;  -- 	SHIFT  -3          ; Shift to be right-justified
           00B : 1041;  -- 	STORE  ShiftVal
           00C : B807;  -- 	LOADI  &B0000111   ; Make a mask of 0b0000110
           00D : 483E;  -- 	AND    BblPosVal   ; Get those bits of the value
           00E : 1042;  -- 	STORE  DitherVal
           00F : 083F;  -- 	LOAD   MidBbl      ; Reset the bubble to the middle
           010 : 1040;  -- 	STORE  CurrBbl
           011 : 0843;  -- 	LOAD   DitherCnt
           012 : 6801;  -- 	ADDI   1
           013 : 1043;  -- 	STORE  DitherCnt   ; Increment the dither counter
           014 : B807;  -- 	LOADI  &B111
           015 : 4843;  -- 	AND    DitherCnt
           016 : 1043;  -- 	STORE  DitherCnt   ; Keep count mod 8
           017 : 083D;  -- 	LOAD   BblVal
           018 : 301A;  -- 	JNEG   LeftShifts  ; Decide left or right based on sign
           019 : 282A;  -- 	JUMP   RightShifts
           01A : 0841;  -- 	LOAD   ShiftVal
           01B : 4022;  -- 	JZERO  LeftDither
           01C : 6FFF;  -- 	ADDI   -1
           01D : 1041;  -- 	STORE  ShiftVal
           01E : 0840;  -- 	LOAD   CurrBbl
           01F : 6001;  -- 	SHIFT  1
           020 : 1040;  -- 	STORE  CurrBbl
           021 : 281A;  -- 	JUMP   LeftShifts
           022 : 0842;  -- 	LOAD   DitherVal
           023 : 2043;  -- 	SUB    DitherCnt
           024 : 303A;  -- 	JNEG   DisplayBbl
           025 : 403A;  -- 	JZERO  DisplayBbl
           026 : 0840;  -- 	LOAD   CurrBbl
           027 : 6001;  -- 	SHIFT  1
           028 : 1040;  -- 	STORE  CurrBbl
           029 : 283A;  -- 	JUMP   DisplayBbl
           02A : 0841;  -- 	LOAD   ShiftVal
           02B : 4032;  -- 	JZERO  RightDither
           02C : 6FFF;  -- 	ADDI   -1
           02D : 1041;  -- 	STORE  ShiftVal
           02E : 0840;  -- 	LOAD   CurrBbl
           02F : 6011;  -- 	SHIFT  -1
           030 : 1040;  -- 	STORE  CurrBbl
           031 : 282A;  -- 	JUMP   RightShifts
           032 : 0842;  -- 	LOAD   DitherVal
           033 : 2043;  -- 	SUB    DitherCnt
           034 : 303A;  -- 	JNEG   DisplayBbl
           035 : 403A;  -- 	JZERO  DisplayBbl
           036 : 0840;  -- 	LOAD   CurrBbl
           037 : 6011;  -- 	SHIFT  -1
           038 : 1040;  -- 	STORE  CurrBbl
           039 : 283A;  -- 	JUMP   DisplayBbl
           03A : 0840;  -- 	LOAD   CurrBbl
           03B : 9801;  -- 	OUT    LEDs
           03C : 8800;  -- 	RETURN
           03D : 0000;  -- BblVal:    DW 0             ; Incoming data value
           03E : 0000;  -- BblPosVal: DW 0             ; Absolute value of incoming data
           03F : 0030;  -- MidBbl:    DW &B0000110000  ; Middle display for LEDs
           040 : 0030;  -- CurrBbl:   DW &B0000110000  ; Current LED display
           041 : 0000;  -- ShiftVal:  DW 0             ; Amount needed to shift
           042 : 0000;  -- DitherVal: DW 0             ; Bits used for dither
           043 : 0000;  -- DitherCnt: DW 0             ; Counter used for dithering
           044 : 9802;  -- 	OUT    Timer
           045 : 9002;  -- 	IN     Timer
           046 : 6FFF;  -- 	ADDI   -1
           047 : 3045;  -- 	JNEG   WaitingLoop
           048 : 8800;  -- 	RETURN
           049 : 0887;  -- 	LOAD   AccCfg      ; load the number of commands
           04A : 105E;  -- 	STORE  CmdCnt
           04B : B887;  -- 	LOADI  AccCfg      ; Load list ADDRESS
           04C : 6801;  -- 	ADDI   1           ; Increment to first command
           04D : 105D;  -- 	STORE  CmdPtr
           04E : 8073;  -- 	CALL   BlockI2C    ; wait for idle
           04F : 0884;  -- 	LOAD   I2CWCmd     ; load write command
           050 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           051 : 705D;  -- 	ILOAD  CmdPtr      ; load current command
           052 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           053 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           054 : 8073;  -- 	CALL   BlockI2C    ; wait for it to finish
           055 : 085D;  -- 	LOAD   CmdPtr
           056 : 6801;  -- 	ADDI   1           ; Increment to next command
           057 : 105D;  -- 	STORE  CmdPtr
           058 : 085E;  -- 	LOAD   CmdCnt
           059 : 6FFF;  -- 	ADDI   -1
           05A : 105E;  -- 	STORE  CmdCnt
           05B : 384E;  -- 	JPOS   I2CCmdLoop
           05C : 8800;  -- 	RETURN
           05D : 0000;  -- CmdPtr: DW 0
           05E : 0000;  -- CmdCnt: DW 0
           05F : 8073;  -- 	CALL   BlockI2C    ; wait for idle
           060 : 0885;  -- 	LOAD   I2CRCmd     ; load command
           061 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           062 : 0886;  -- 	LOAD   AccXAddr    ; 
           063 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           064 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           065 : 8073;  -- 	CALL   BlockI2C    ; wait for it to finish
           066 : 9091;  -- 	IN     I2C_data    ; put the data in AC
           067 : 8069;  -- 	CALL   SwapBytes   ; bytes returned in wrong order; swap them
           068 : 8800;  -- 	RETURN
           069 : 1071;  -- 	STORE  SBT1
           06A : 6008;  -- 	SHIFT  8
           06B : 1072;  -- 	STORE  SBT2
           06C : 0871;  -- 	LOAD   SBT1
           06D : 6018;  -- 	SHIFT  -8
           06E : 489B;  -- 	AND    LoByte
           06F : 5072;  -- 	OR     SBT2
           070 : 8800;  -- 	RETURN
           071 : 0000;  -- SBT1: DW 0
           072 : 0000;  -- SBT2: DW 0
           073 : 088F;  -- 	LOAD   Zero
           074 : 108C;  -- 	STORE  Temp        ; Used to check for timeout
           075 : 088C;  -- 	LOAD   Temp
           076 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           077 : 108C;  -- 	STORE  Temp
           078 : 407C;  -- 	JZERO  I2CError    ; Timeout occurred; error
           079 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           07A : 3875;  -- 	JPOS   BI2CL       ; If not 0, try again
           07B : 8800;  -- 	RETURN             ; Else return
           07C : 088F;  -- 	LOAD   Zero
           07D : 692C;  -- 	ADDI   &H12C       ; "I2C"
           07E : 9804;  -- 	OUT    Hex0        ; display error message
           07F : 287C;  -- 	JUMP   I2CError
           080 : 3883;  -- 	JPOS   Abs_r
           081 : 5890;  -- 	XOR    NegOne       ; Flip all bits
           082 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           083 : 8800;  -- 	RETURN
           084 : 203A;  -- I2CWCmd:  DW &H203A    ; write two i2c bytes, addr 0x3A
           085 : 123A;  -- I2CRCmd:  DW &H123A    ; write one byte, read two bytes, addr 0x3A
           086 : 0034;  -- AccXAddr: DW &H34      ; X acceleration register address.
           087 : 0004;  -- 	DW 4           ; Number of commands to send
           088 : 3111;  -- 	DW &H3111      ; Right-justified 10-bit data, +/-4 G
           089 : 3800;  -- 	DW &H3800      ; No FIFO
           08A : 2C0A;  -- 	DW &H2C0A      ; 25 samples per second
           08B : 2D08;  -- 	DW &H2D08      ; No sleep
           08C : 0000;  -- Temp:      DW 0
           08D : 0000;  -- Pattern:   DW 0
           08E : 0000;  -- Score:     DW 0
           08F : 0000;  -- Zero:      DW 0
           090 : FFFF;  -- NegOne:    DW -1
           091 : 0001;  -- Bit0:      DW &B0000000001
           092 : 0002;  -- Bit1:      DW &B0000000010
           093 : 0004;  -- Bit2:      DW &B0000000100
           094 : 0008;  -- Bit3:      DW &B0000001000
           095 : 0010;  -- Bit4:      DW &B0000010000
           096 : 0020;  -- Bit5:      DW &B0000100000
           097 : 0040;  -- Bit6:      DW &B0001000000
           098 : 0080;  -- Bit7:      DW &B0010000000
           099 : 0100;  -- Bit8:      DW &B0100000000
           09A : 0200;  -- Bit9:      DW &B1000000000
           09B : 00FF;  -- LoByte:    DW &H00FF
           09C : FF00;  -- HiByte:    DW &HFF00
  END;
